name: Database Updater

on:
  schedule:
    - cron: "0 * * * *"
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      update_version:
        description: "Update Xenia & Xenia Manager Version"
        required: false
        default: true
        type: boolean
      update_compatibility:
        description: "Update Game Compatibility Database"
        required: false
        default: true
        type: boolean
      update_patches:
        description: "Update Game Patches"
        required: false
        default: true
        type: boolean
      update_launchbox_metadata:
        description: "Update Launchbox Database Metadata"
        required: false
        default: true
        type: boolean
      update_gamecontrollerdb:
        description: "Update SDL GameControllerDB"
        required: false
        default: true
        type: boolean

env:
  XENIA_CANARY_REPO: xenia-canary/game-patches
  XENIA_NETPLAY_REPO: AdrianCassar/Xenia-WebServices

jobs:
  update-version:
    name: Update Xenia & Xenia Manager Version
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_version == 'true')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/version.json
          sparse-checkout-cone-mode: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Fetch Xenia versions
        env:
          AUTH_TOKEN: ${{ secrets.COMMIT_TOKEN }}
        run: |
          cat > fetch_versions.py << 'EOF'
          import json
          import urllib.request
          import os
          import sys

          GITHUB_API = "https://api.github.com/repos"

          def debug(msg):
              print(f"[DEBUG] {msg}", file=sys.stderr)

          def gh_get(url):
              debug(f"Requesting: {url}")
              headers = {"User-Agent": "github-actions", "Accept": "application/vnd.github+json"}
              token = os.environ.get("AUTH_TOKEN")
              if token:
                  headers["Authorization"] = f"Bearer {token}"
              req = urllib.request.Request(url, headers=headers)
              with urllib.request.urlopen(req, timeout=20) as resp:
                  data = json.loads(resp.read())
                  debug(f"Response received from {url} (type={type(data)})")
                  return data

          # --- Xenia Manager stable/experimental (just tag string)
          def fetch_latest_tag_string(repo_url):
              try:
                  data = gh_get(repo_url)
                  tag = data.get("tag_name", "unknown")
                  debug(f"Latest tag for {repo_url} is {tag}")
                  return tag
              except Exception as e:
                  print(f"Error fetching {repo_url}: {e}", file=sys.stderr)
                  return "unknown"

          # --- Canary latest with Windows asset
          def fetch_latest_canary():
              releases = gh_get(f"{GITHUB_API}/xenia-canary/xenia-canary-releases/releases")
              debug(f"Found {len(releases)} canary releases")
              for rel in releases:
                  assets = rel.get("assets", [])
                  win_assets = [a for a in assets if "windows" in a["name"].lower()]
                  if win_assets:
                      debug(f"Selected Canary release {rel['tag_name']}, Windows assets: {len(win_assets)}")
                      return {
                          "tag_name": rel["tag_name"],
                          "url": win_assets[0]["browser_download_url"]
                      }
              debug("No Canary release with Windows asset found")
              return {"tag_name": "unknown", "url": None}

          # --- Netplay: stable & nightly
          def fetch_netplay_stable():
              rel = gh_get(f"{GITHUB_API}/AdrianCassar/xenia-canary/releases/latest")
              assets = [a for a in rel.get("assets", []) if "windows" in a["name"].lower()]
              debug(f"Netplay stable tag: {rel.get('tag_name', 'unknown')} with {len(assets)} Windows assets")
              return {
                  "tag_name": rel.get("tag_name", "unknown"),
                  "url": assets[0]["browser_download_url"] if assets else None
              }

          def fetch_netplay_nightly():
              branch = "netplay_canary_experimental"
              commit_data = gh_get(f"{GITHUB_API}/AdrianCassar/xenia-canary/commits/{branch}")
              sha = commit_data.get("sha", "")[:7]
              debug(f"Netplay nightly commit SHA: {sha}")
              return {
                  "tag_name": sha or "unknown",
                  "url": (
                      "https://nightly.link/AdrianCassar/xenia-canary/"
                      "workflows/Windows_build/netplay_canary_experimental/"
                      "xenia_canary_netplay_windows.zip"
                  )
              }

          # --- Mousehook: standard vs netplay
          def fetch_mousehook_versions():
              releases = gh_get(f"{GITHUB_API}/marinesciencedude/xenia-canary-mousehook/releases")
              debug(f"Found {len(releases)} mousehook releases")

              standard_rel = next((r for r in releases if "netplay" not in r["tag_name"].lower()), None)
              netplay_rel = next((r for r in releases if "netplay" in r["tag_name"].lower()), None)

              def fmt(rel, label):
                  if not rel:
                      debug(f"No Mousehook release found for {label}")
                      return {"tag_name": "unknown", "url": None}
                  url = rel["assets"][0]["browser_download_url"] if rel.get("assets") else None
                  debug(f"Mousehook {label} tag: {rel['tag_name']} URL: {url}")
                  return {"tag_name": rel["tag_name"], "url": url}

              return {
                  "standard": fmt(standard_rel, "standard"),
                  "netplay": fmt(netplay_rel, "netplay")
              }

          # --- Main execution
          debug("=== Starting version fetch process ===")
          data = {
              "stable": fetch_latest_tag_string(
                  f"{GITHUB_API}/xenia-manager/xenia-manager/releases/latest"
              ),
              "experimental": fetch_latest_tag_string(
                  f"{GITHUB_API}/xenia-manager/experimental-builds/releases/latest"
              ),
              "xenia": {
                  "canary": fetch_latest_canary(),
                  "netplay": {
                      "stable": fetch_netplay_stable(),
                      "nightly": fetch_netplay_nightly()
                  },
                  "mousehook": fetch_mousehook_versions()
              }
          }

          debug("Final JSON structure:")
          debug(json.dumps(data, indent=2))

          with open("data/version.json", "w", encoding="utf-8") as f:
              json.dump(data, f, indent=2)

          print("Versions fetched successfully")
          EOF
          python fetch_versions.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'
          git add data/version.json
          if git diff --cached --quiet; then
            echo "No changes detected in version.json"
            exit 0
          fi
          git commit -m "chore: Update Xenia Manager versions"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"

  update-compatibility:
    name: Update Game Compatibility Database
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule' && startsWith(github.event.schedule, '0 0')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_compatibility == 'true')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/game-compatibility/stable.json
            data/game-compatibility/canary.json
            scripts/game_compatibility.py
          sparse-checkout-cone-mode: false

      - name: Skip if not daily schedule
        if: github.event_name == 'schedule'
        run: |
          if [ "$(date -u +%H)" != "00" ]; then
          echo "Not the daily schedule, skipping job."
          exit 0
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update game compatibility database (Canary)
        run: python scripts/game_compatibility.py --complete --debug
        env:
          TOKEN: ${{ secrets.COMMIT_TOKEN }}

      - name: Update game compatibility database (Stable)
        if: github.event_name == 'workflow_dispatch'
        run: python scripts/game_compatibility.py --stable --complete --debug
        env:
          TOKEN: ${{ secrets.COMMIT_TOKEN }}

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'
          git add data/game-compatibility/
          if git diff --cached --quiet; then
            echo "No changes detected in game compatibility database"
            exit 0
          fi
          git commit -m "chore: Update game compatibility database"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"

  update-patches:
    name: Update Game Patches
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule' && startsWith(github.event.schedule, '0 0')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_gamecontrollerdb == 'true')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/patches/canary.json
            data/patches/canary.tmp
            data/patches/netplay.json
            data/patches/netplay.tmp
          sparse-checkout-cone-mode: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch game patches
        env:
          AUTH_TOKEN: ${{ secrets.COMMIT_TOKEN }}
        run: |
          fetch_with_retry() {
            local url=$1
            local output=$2
            local name=$3
            local max_attempts=3
            local attempt=1
            local temp_file="${output}.tmp"
            while [ $attempt -le $max_attempts ]; do
              echo "Fetching $name (attempt $attempt/$max_attempts)..."
              status=$(curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -H "User-Agent: GitHub-Actions-Bot" \
                -H "Authorization: Bearer ${AUTH_TOKEN}" \
                -o "$temp_file" \
                -s -w "%{http_code}" \
                --max-time 30 \
                --retry 2 \
                --retry-delay 5 \
                "$url")
              if [ "$status" -eq 200 ]; then
                if jq empty "$temp_file" 2>/dev/null; then
                  jq '.' "$temp_file" > "$output"
                  rm "$temp_file"
                  echo "$name fetched successfully"
                  return 0
                else
                  echo "Invalid JSON in $name response"
                fi
              else
                echo "HTTP $status for $name"
              fi
              attempt=$((attempt + 1))
              [ $attempt -le $max_attempts ] && sleep 10
            done
            return 1
          }
          mkdir -p data/patches
          fetch_with_retry \
            "https://api.github.com/repos/${{ env.XENIA_CANARY_REPO }}/contents/patches" \
            "data/patches/canary.json" \
            "canary"
          fetch_with_retry \
            "https://api.github.com/repos/${{ env.XENIA_NETPLAY_REPO }}/contents/patches" \
            "data/patches/netplay.json" \
            "netplay"

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'
          git add data/patches/
          if git diff --cached --quiet; then
            echo "No changes detected in patch files"
            exit 0
          fi
          git commit -m "chore: Update Xenia Canary & Netplay patches"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"

  update_launchbox_metadata:
    name: Update Launchbox Database Metadata
    if: |
      (github.event_name == 'schedule' && startsWith(github.event.schedule, '0 0')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_gamecontrollerdb == 'true')
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            data/metadata/launchbox/games.json
            data/metadata/launchbox/search.json
            data/metadata/launchbox/titles/
            scripts/launchbox_metadata.py
          sparse-checkout-cone-mode: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Download Metadata
        shell: pwsh
        run: Invoke-WebRequest -Uri "https://gamesdb.launchbox-app.com/Metadata.zip" -OutFile "Metadata.zip"

      - name: Extract Metadata
        shell: pwsh
        run: Expand-Archive -Path "Metadata.zip" -DestinationPath "Metadata" -Force

      - name: Parse Metadata
        run: python scripts/launchbox_metadata.py --debug

      - name: Cleanup temporary files
        shell: pwsh
        run: |
          Remove-Item -Path "Metadata.zip" -Force
          Remove-Item -Path "Metadata" -Recurse -Force

      - name: Commit and push changes
        shell: pwsh
        run: |
          git config --global user.name "xeniamanager-ci"
          git config --global user.email "214508751+xeniamanager-ci@users.noreply.github.com"
          git add data/metadata/launchbox/
          if (-not (git diff --cached --quiet)) {
            git commit -m "chore: Update Launchbox Metadata"
            git pull --rebase origin $env:GITHUB_REF_NAME
            git push origin $env:GITHUB_REF_NAME
          }

  update-gamecontrollerdb:
    name: Update SDL GameControllerDB
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule' && startsWith(github.event.schedule, '0 0')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_gamecontrollerdb == 'true')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/gamecontrollerdb.txt
          sparse-checkout-cone-mode: false

      - name: Download gamecontrollerdb.txt
        run: |
          mkdir -p data
          curl -sSL "https://raw.githubusercontent.com/mdqinc/SDL_GameControllerDB/master/gamecontrollerdb.txt" -o data/gamecontrollerdb.txt

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'
          git add data/gamecontrollerdb.txt
          if git diff --cached --quiet; then
            echo "No changes detected in gamecontrollerdb.txt"
            exit 0
          fi
          git commit -m "chore: Update SDL GameControllerDB"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"
