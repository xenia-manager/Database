name: Database Updater

on:
  schedule:
    - cron: "0 * * * *"
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      update_version:
        description: "Update Xenia Manager Version"
        required: false
        default: true
        type: boolean
      update_compatibility:
        description: "Update Game Compatibility Database"
        required: false
        default: true
        type: boolean
      update_patches:
        description: "Update Game Patches"
        required: false
        default: true
        type: boolean
      update_launchbox_metadata:
        description: "Update Launchbox Database Metadata"
        required: false
        default: true
        type: boolean
      update_gamecontrollerdb:
        description: "Update SDL GameControllerDB"
        required: false
        default: true
        type: boolean

env:
  XENIA_CANARY_REPO: xenia-canary/game-patches
  XENIA_NETPLAY_REPO: AdrianCassar/Xenia-WebServices

jobs:
  update-version:
    name: Update Xenia Manager Version
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_version == 'true')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/version.json
          sparse-checkout-cone-mode: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch Xenia Manager versions
        env:
          AUTH_TOKEN: ${{ secrets.COMMIT_TOKEN }}
        run: |
          cat > fetch_versions.py << 'EOF'
          import json
          import urllib.request
          import urllib.error
          import os
          import sys
          def fetch_version(url, name):
              try:
                  headers = {
                      'User-Agent': 'github-actions',
                      'Accept': 'application/vnd.github+json'
                  }
                  token = os.environ.get("AUTH_TOKEN")
                  if token:
                      headers['Authorization'] = f"Bearer {token}"
                  req = urllib.request.Request(url, headers=headers)
                  with urllib.request.urlopen(req, timeout=10) as response:
                      data = json.loads(response.read())
                      return data.get('tag_name', 'unknown')
              except (urllib.error.URLError, json.JSONDecodeError, KeyError) as e:
                  print(f"Error fetching {name}: {e}", file=sys.stderr)
                  return 'unknown'
          urls = {
              'stable': 'https://api.github.com/repos/xenia-manager/xenia-manager/releases/latest',
              'experimental': 'https://api.github.com/repos/xenia-manager/experimental-builds/releases/latest'
          }
          data = {key: fetch_version(url, key) for key, url in urls.items()}
          with open('data/version.json', 'w', encoding='utf-8') as f:
              json.dump(data, f, indent=2)
          print("Versions fetched successfully")
          EOF
          python fetch_versions.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'
          git add data/version.json
          if git diff --cached --quiet; then
            echo "No changes detected in version.json"
            exit 0
          fi
          git commit -m "chore: Update Xenia Manager versions"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"

  update-compatibility:
    name: Update Game Compatibility Database
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule' && startsWith(github.event.schedule, '0 0')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_compatibility == 'true')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/game-compatibility/stable.json
            data/game-compatibility/canary.json
            scripts/game_compatibility.py
          sparse-checkout-cone-mode: false

      - name: Skip if not daily schedule
        if: github.event_name == 'schedule'
        run: |
          if [ "$(date -u +%H)" != "00" ]; then
          echo "Not the daily schedule, skipping job."
          exit 0
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update game compatibility database (Canary)
        run: python scripts/game_compatibility.py --complete --debug
        env:
          TOKEN: ${{ secrets.COMMIT_TOKEN }}

      - name: Update game compatibility database (Stable)
        if: github.event_name == 'workflow_dispatch'
        run: python scripts/game_compatibility.py --stable --complete --debug
        env:
          TOKEN: ${{ secrets.COMMIT_TOKEN }}

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'
          git add data/game-compatibility/
          if git diff --cached --quiet; then
            echo "No changes detected in game compatibility database"
            exit 0
          fi
          git commit -m "chore: Update game compatibility database"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"

  update-patches:
    name: Update Game Patches
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule' && startsWith(github.event.schedule, '0 0')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_gamecontrollerdb == 'true')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/patches/canary.json
            data/patches/canary.tmp
            data/patches/netplay.json
            data/patches/netplay.tmp
          sparse-checkout-cone-mode: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch game patches
        env:
          AUTH_TOKEN: ${{ secrets.COMMIT_TOKEN }}
        run: |
          fetch_with_retry() {
            local url=$1
            local output=$2
            local name=$3
            local max_attempts=3
            local attempt=1
            local temp_file="${output}.tmp"
            while [ $attempt -le $max_attempts ]; do
              echo "Fetching $name (attempt $attempt/$max_attempts)..."
              status=$(curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -H "User-Agent: GitHub-Actions-Bot" \
                -H "Authorization: Bearer ${AUTH_TOKEN}" \
                -o "$temp_file" \
                -s -w "%{http_code}" \
                --max-time 30 \
                --retry 2 \
                --retry-delay 5 \
                "$url")
              if [ "$status" -eq 200 ]; then
                if jq empty "$temp_file" 2>/dev/null; then
                  jq '.' "$temp_file" > "$output"
                  rm "$temp_file"
                  echo "$name fetched successfully"
                  return 0
                else
                  echo "Invalid JSON in $name response"
                fi
              else
                echo "HTTP $status for $name"
              fi
              attempt=$((attempt + 1))
              [ $attempt -le $max_attempts ] && sleep 10
            done
            return 1
          }
          mkdir -p data/patches
          fetch_with_retry \
            "https://api.github.com/repos/${{ env.XENIA_CANARY_REPO }}/contents/patches" \
            "data/patches/canary.json" \
            "canary"
          fetch_with_retry \
            "https://api.github.com/repos/${{ env.XENIA_NETPLAY_REPO }}/contents/patches" \
            "data/patches/netplay.json" \
            "netplay"

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'
          git add data/patches/
          if git diff --cached --quiet; then
            echo "No changes detected in patch files"
            exit 0
          fi
          git commit -m "chore: Update Xenia Canary & Netplay patches"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"

  update_launchbox_metadata:
    name: Update Launchbox Database Metadata
    if: |
      (github.event_name == 'schedule' && startsWith(github.event.schedule, '0 0')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_gamecontrollerdb == 'true')
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            data/metadata/launchbox/games.json
            data/metadata/launchbox/search.json
            data/metadata/launchbox/titles/
            scripts/launchbox_metadata.py
          sparse-checkout-cone-mode: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Download Metadata
        shell: pwsh
        run: Invoke-WebRequest -Uri "https://gamesdb.launchbox-app.com/Metadata.zip" -OutFile "Metadata.zip"

      - name: Extract Metadata
        shell: pwsh
        run: Expand-Archive -Path "Metadata.zip" -DestinationPath "Metadata" -Force

      - name: Parse Metadata
        run: python scripts/launchbox_metadata.py --debug

      - name: Cleanup temporary files
        shell: pwsh
        run: |
          Remove-Item -Path "Metadata.zip" -Force
          Remove-Item -Path "Metadata" -Recurse -Force

      - name: Commit and push changes
        shell: pwsh
        run: |
          git config --global user.name "xeniamanager-ci"
          git config --global user.email "214508751+xeniamanager-ci@users.noreply.github.com"
          git add data/metadata/launchbox/
          if (-not (git diff --cached --quiet)) {
            git commit -m "chore: Update Launchbox Metadata"
            git pull --rebase origin $env:GITHUB_REF_NAME
            git push origin $env:GITHUB_REF_NAME
          }

  update-gamecontrollerdb:
    name: Update SDL GameControllerDB
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule' && startsWith(github.event.schedule, '0 0')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.update_gamecontrollerdb == 'true')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/gamecontrollerdb.txt
          sparse-checkout-cone-mode: false

      - name: Download gamecontrollerdb.txt
        run: |
          mkdir -p data
          curl -sSL "https://raw.githubusercontent.com/mdqinc/SDL_GameControllerDB/master/gamecontrollerdb.txt" -o data/gamecontrollerdb.txt

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'
          git add data/gamecontrollerdb.txt
          if git diff --cached --quiet; then
            echo "No changes detected in gamecontrollerdb.txt"
            exit 0
          fi
          git commit -m "chore: Update SDL GameControllerDB"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"
